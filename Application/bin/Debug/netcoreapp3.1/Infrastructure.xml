<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.CachingAttribute">
            <summary>
            这个Attribute就是使用时候的验证，把它添加到要缓存数据的方法中，即可完成缓存的操作。
            </summary>
        </member>
        <member name="P:Infrastructure.CachingAttribute.AbsoluteExpiration">
            <summary>
            缓存绝对过期时间（分钟）
            </summary>
        </member>
        <member name="T:Infrastructure.UseTranAttribute">
            <summary>
            这个Attribute就是使用时候的验证，把它添加到需要执行事务的方法中，即可完成事务的操作。
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.BaseResult.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.BaseResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.RightOrWrongResult.IsTrue">
            <summary>
            最终的结果得到的是正确的
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.RightOrWrongResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.LoginResult">
            <summary>
            用户登录结果
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.LoginResult.Token">
            <summary>
            jwt
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.RegisterResult">
            <summary>
            账号注册结果
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.UsernamePasswordCombinationDto">
            <summary>
            账户是否存在
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.UsernamePasswordCombinationDto.Name">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.UsernamePasswordCombinationDto.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Infrastructure.Permissions">
            <summary>
            权限变量配置
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Infrastructure.Permissions.IsUseIds4" -->
        <member name="T:Infrastructure.RoutePrefix">
            <summary>
            路由变量前缀配置
            </summary>
        </member>
        <member name="F:Infrastructure.RoutePrefix.Name">
            <summary>
            前缀名
            如果不需要，尽量留空，不要修改
            除非一定要在所有的 api 前统一加上特定前缀
            </summary>
        </member>
        <member name="T:Infrastructure.Appsettings">
            <summary>
            appsettings.json操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Appsettings.app(System.String[])">
            <summary>
            封装要操作的字符
            </summary>
            <param name="sections">节点配置</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Appsettings.app``1(System.String[])">
            <summary>
            递归获取配置信息数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sections"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteErrorLine(System.String,System.ConsoleColor)">
            <summary>
            打印错误信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteWarningLine(System.String,System.ConsoleColor)">
            <summary>
            打印警告信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteInfoLine(System.String,System.ConsoleColor)">
            <summary>
            打印正常信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteSuccessLine(System.String,System.ConsoleColor)">
            <summary>
            打印成功的信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.GetPostfixStr(System.String)">
            <summary>
            取后缀名
            </summary>
            <param name="filename">文件名</param>
            <returns>.gif|.html格式</returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
            <param name="encode">编码格式</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="encode">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileAdd(System.String,System.String)">
            <summary>
            追加文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="strings">内容</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileCoppy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="OrignFile">原始文件</param>
            <param name="NewFile">新文件路径</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileDel(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="Path">路径</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OrignFile">原始路径</param>
            <param name="NewFile">新路径</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FolderCreate(System.String,System.String)">
            <summary>
            在当前目录下创建目录
            </summary>
            <param name="OrignFolder">当前目录</param>
            <param name="NewFloder">新目录</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.DeleteFolder(System.String)">
            <summary>
            递归删除文件夹目录及文件
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:Infrastructure.Helper.HtmlHelper.ReplaceHtmlTag(System.String,System.Int32)">
            <summary>
            去除富文本中的HTML标签
            </summary>
            <param name="html"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.JsonHelper.GetJSON``1(System.Object)">
            <summary>
            转换对象为JSON格式数据
            </summary>
            <typeparam name="T">类</typeparam>
            <param name="obj">对象</param>
            <returns>字符格式的JSON数据</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Infrastructure.Helper.JsonHelper.JSON``1(System.Collections.Generic.List{``0})" -->
        <member name="M:Infrastructure.Helper.JsonHelper.ParseFormByJson``1(System.String)">
            <summary>
            JSON格式字符转换为T类型的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Helper.MD5Helper">
            <summary>
            MD5 加密
            </summary>
        </member>
        <member name="M:Infrastructure.Helper.MD5Helper.MD5Encrypt16(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.MD5Helper.MD5Encrypt32(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.MD5Helper.MD5Encrypt64(System.String)">
            <summary>
            64位MD5加密
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Helper.RecursionHelper">
            <summary>
            泛型递归求树形结构
            </summary>
        </member>
        <member name="M:Infrastructure.Helper.UnicodeHelper.StringToUnicode(System.String)">
            <summary>
            字符串转Unicode码
            </summary>
            <returns>The to unicode.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Infrastructure.Helper.UnicodeHelper.UnicodeToString(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <returns>The to string.</returns>
            <param name="unicode">Unicode.</param>
        </member>
        <member name="M:Infrastructure.SerializeHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.SerializeHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.UtilConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToInt(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToInt(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToMoney(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToMoney(System.Object,System.Double)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToString(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToString(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDecimal(System.Object,System.Decimal)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDate(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDate(System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToBool(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.HttpRestSharp.HttpHelper">
            <summary>
            基于 RestSharp 封装HttpHelper
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Infrastructure.HttpRestSharp.HttpHelper.GetApi``1(System.String,System.String,System.String)" -->
        <member name="M:Infrastructure.HttpRestSharp.HttpHelper.PostApi``1(System.String,System.Object)">
            <summary>
            Post 请求
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="url">完整的url</param>
            <param name="body">post body,可以匿名或者反序列化</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.HttpRestSharp.IRestSharp">
            <summary>
            API请求执行者接口
            </summary>
        </member>
        <member name="M:Infrastructure.HttpRestSharp.IRestSharp.Execute(RestSharp.IRestRequest)">
            <summary>
            同步执行方法
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.HttpRestSharp.IRestSharp.Execute``1(RestSharp.IRestRequest)">
            <summary>
            同步执行方法
            </summary>
            <typeparam name="T">返回值</typeparam>
            <param name="request">请求参数</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.HttpRestSharp.IRestSharp.ExecuteAsync(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse})">
            <summary>
            异步执行方法
            </summary>
            <param name="request">请求参数</param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.HttpRestSharp.IRestSharp.ExecuteAsync``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0}})">
            <summary>
            异步执行方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.HttpRestSharp.RestSharpClient">
            <summary>
            Rest接口执行者
            </summary>
        </member>
        <member name="F:Infrastructure.HttpRestSharp.RestSharpClient.client">
            <summary>
            请求客户端
            </summary>
        </member>
        <member name="P:Infrastructure.HttpRestSharp.RestSharpClient.BaseUrl">
            <summary>
            接口基地址 格式：http://apk.neters.club/
            </summary>
        </member>
        <member name="P:Infrastructure.HttpRestSharp.RestSharpClient.DefaultDateParameterFormat">
            <summary>
            默认的时间参数格式
            </summary>
        </member>
        <member name="P:Infrastructure.HttpRestSharp.RestSharpClient.DefaultAuthenticator">
            <summary>
            默认验证器
            </summary>
        </member>
        <member name="M:Infrastructure.HttpRestSharp.RestSharpClient.#ctor(System.String,RestSharp.Authenticators.IAuthenticator)">
            <summary>
            构造函数
            </summary>
            <param name="baseUrl"></param>
            <param name="authenticator"></param>
        </member>
        <member name="M:Infrastructure.HttpRestSharp.RestSharpClient.Execute(RestSharp.IRestRequest)">
            <summary>
            通用执行方法
            </summary>
            <param name="request">请求参数</param>
            <remarks>
            调用实例：
            var client = new RestSharpClient("http://apk.neters.club/");
            var result = client.Execute(new RestRequest("v2/movie/in_theaters", Method.GET));
            var content = result.Content;//返回的字符串数据
            </remarks>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Infrastructure.HttpRestSharp.RestSharpClient.Execute``1(RestSharp.IRestRequest)" -->
        <!-- Badly formed XML comment ignored for member "M:Infrastructure.HttpRestSharp.RestSharpClient.ExecuteAsync(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse})" -->
        <!-- Badly formed XML comment ignored for member "M:Infrastructure.HttpRestSharp.RestSharpClient.ExecuteAsync``1(RestSharp.IRestRequest,System.Action{RestSharp.IRestResponse{``0}})" -->
        <member name="M:Infrastructure.Hubs.ChatHub.SendMessageToGroupAsync(System.String,System.String)">
            <summary>
            向指定群组发送信息
            </summary>
            <param name="groupName">组名</param>
            <param name="message">信息内容</param>  
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.ChatHub.AddToGroup(System.String)">
            <summary>
            加入指定组
            </summary>
            <param name="groupName">组名</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.ChatHub.RemoveFromGroup(System.String)">
            <summary>
            退出指定组
            </summary>
            <param name="groupName">组名</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.ChatHub.SendPrivateMessage(System.String,System.String)">
            <summary>
            向指定成员发送信息
            </summary>
            <param name="user">成员名</param>
            <param name="message">信息内容</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.ChatHub.OnConnectedAsync">
            <summary>
            当连接建立时运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.ChatHub.OnDisconnectedAsync(System.Exception)">
            <summary>
            当链接断开时运行
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.IChatClient.ReceiveMessage(System.Object)">
            <summary>
            SignalR接收信息
            </summary>
            <param name="message">信息内容</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Hubs.IChatClient.ReceiveMessage(System.String,System.String)">
            <summary>
            SignalR接收信息
            </summary>
            <param name="user">指定接收客户端</param>
            <param name="message">信息内容</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Jwt.JwtHelper.IssueJwt(Infrastructure.Jwt.TokenModelJwt)">
            <summary>
            根据用户信息，颁发Token
            </summary>
        </member>
        <member name="M:Infrastructure.Jwt.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析Token
            </summary>
        </member>
        <member name="T:Infrastructure.Jwt.TokenModelJwt">
            <summary>
            jwt的 token 模型
            </summary>
        </member>
        <member name="P:Infrastructure.Jwt.TokenModelJwt.Uid">
            <summary>
            用户id
            </summary>
        </member>
        <member name="M:Infrastructure.LogHelper.SerilogServer.WriteLog(System.String,System.String[],System.Boolean)">
            <summary>
            记录日常日志
            </summary>
            <param name="filename"></param>
            <param name="message"></param>
            <param name="info"></param>
        </member>
        <member name="M:Infrastructure.LogHelper.SerilogServer.WriteErrorLog(System.String,System.String,System.Exception)">
            <summary>
            记录异常日志
            </summary>
            <param name="filename"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Infrastructure.MemoryCache.ICaching">
            <summary>
            简单的缓存接口，只有查询和添加，以后会进行扩展
            </summary>
        </member>
        <member name="T:Infrastructure.MemoryCache.MemoryCaching">
            <summary>
            实例化缓存接口ICaching
            </summary>
        </member>
        <member name="T:Infrastructure.IRedisCacheManager">
            <summary>
            Redis缓存接口
            </summary>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.GetRedisConnection">
            <summary>
            核心代码，获取连接实例
            通过双if 夹lock的方式，实现单例模式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Get(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.GetValue(System.String)">
            <summary>
            查询
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Get``1(System.String)">
            <summary>
            获取
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.SetValue(System.String,System.Byte[])">
            <summary>
            增加/修改
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
