<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infrastructure</name>
    </assembly>
    <members>
        <member name="T:Infrastructure.CachingAttribute">
            <summary>
            这个Attribute就是使用时候的验证，把它添加到要缓存数据的方法中，即可完成缓存的操作。
            </summary>
        </member>
        <member name="P:Infrastructure.CachingAttribute.AbsoluteExpiration">
            <summary>
            缓存绝对过期时间（分钟）
            </summary>
        </member>
        <member name="T:Infrastructure.UseTranAttribute">
            <summary>
            这个Attribute就是使用时候的验证，把它添加到需要执行事务的方法中，即可完成事务的操作。
            </summary>
        </member>
        <member name="M:Infrastructure.AutoMap.Mapping.MappingTo``1(System.Object)">
            <summary>
            映射
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <typeparam name="TResult">映射结果数据类型</typeparam>
            <param name="target">待转换数据</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.AutoMap.Mapping.MappingTo``1(System.Collections.Generic.List{System.Object})">
            <summary>
            映射
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <typeparam name="TResult">映射结果数据类型</typeparam>
            <param name="target">待转换数据</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.AutoMap.Mapping.MappingTo``2(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            映射
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <typeparam name="TResult">映射结果数据类型</typeparam>
            <param name="target">待转换数据</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.AutoMap.Mapping.MappingTo``1(System.Linq.IQueryable{System.Object})">
            <summary>
            映射
            </summary>
            <typeparam name="TSource">源数据类型</typeparam>
            <typeparam name="TResult">映射结果数据类型</typeparam>
            <param name="target">待转换数据</param>
            <returns></returns>
        </member>
        <member name="P:Infrastructure.Dto.Base.BaseResult.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.BaseResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.RightOrWrongResult.IsTrue">
            <summary>
            最终的结果得到的是正确的
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.Base.RightOrWrongResult.Message">
            <summary>
            提示信息
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.CascaderRecordDto">
            <summary>
            饿了么UI 级联选择器填充数据传输模型
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.CascaderRecordDto.Value">
            <summary>
            包含的值
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.CascaderRecordDto.Lable">
            <summary>
            用于显示的文字
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.CascaderRecordDto.Children">
            <summary>
            子级
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.LoginResult">
            <summary>
            用户登录结果
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.LoginResult.Token">
            <summary>
            jwt
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.NewMenuRecordDto">
            <summary>
            新菜单记录 dto 模型
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.Name">
            <summary>
            菜单名称
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.Url">
            <summary>
            url
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.IsShow">
            <summary>
            是否显示
            </summary>        
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.Enable">
            <summary>
            菜单是否有效
            </summary>       
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.Desc">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.NewMenuRecordDto.ParentId">
            <summary>
            父级菜单
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.RegisterResult">
            <summary>
            账号注册结果
            </summary>
        </member>
        <member name="T:Infrastructure.Dto.UsernamePasswordCombinationDto">
            <summary>
            账户是否存在
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.UsernamePasswordCombinationDto.Name">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:Infrastructure.Dto.UsernamePasswordCombinationDto.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:Infrastructure.Permissions">
            <summary>
            权限变量配置
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Infrastructure.Permissions.IsUseIds4" -->
        <member name="T:Infrastructure.RoutePrefix">
            <summary>
            路由变量前缀配置
            </summary>
        </member>
        <member name="F:Infrastructure.RoutePrefix.Name">
            <summary>
            前缀名
            如果不需要，尽量留空，不要修改
            除非一定要在所有的 api 前统一加上特定前缀
            </summary>
        </member>
        <member name="T:Infrastructure.Appsettings">
            <summary>
            appsettings.json操作类
            </summary>
        </member>
        <member name="M:Infrastructure.Appsettings.app(System.String[])">
            <summary>
            封装要操作的字符
            </summary>
            <param name="sections">节点配置</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Appsettings.app``1(System.String[])">
            <summary>
            递归获取配置信息数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sections"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Helper.ConsoleHelper">
            <summary>
            控制台 内容输出
            </summary>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteErrorLine(System.String,System.ConsoleColor)">
            <summary>
            打印错误信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteWarningLine(System.String,System.ConsoleColor)">
            <summary>
            打印警告信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteInfoLine(System.String,System.ConsoleColor)">
            <summary>
            打印正常信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.ConsoleHelper.WriteSuccessLine(System.String,System.ConsoleColor)">
            <summary>
            打印成功的信息
            </summary>
            <param name="str">待打印的字符串</param>
            <param name="color">想要打印的颜色</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.GetPostfixStr(System.String)">
            <summary>
            取后缀名
            </summary>
            <param name="filename">文件名</param>
            <returns>.gif|.html格式</returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.WriteFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            写文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="Strings">文件内容</param>
            <param name="encode">编码格式</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.ReadFile(System.String)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="encode">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileAdd(System.String,System.String)">
            <summary>
            追加文件
            </summary>
            <param name="Path">文件路径</param>
            <param name="strings">内容</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileCoppy(System.String,System.String)">
            <summary>
            拷贝文件
            </summary>
            <param name="OrignFile">原始文件</param>
            <param name="NewFile">新文件路径</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileDel(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="Path">路径</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="OrignFile">原始路径</param>
            <param name="NewFile">新路径</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.FolderCreate(System.String,System.String)">
            <summary>
            在当前目录下创建目录
            </summary>
            <param name="OrignFolder">当前目录</param>
            <param name="NewFloder">新目录</param>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.DeleteFolder(System.String)">
            <summary>
            递归删除文件夹目录及文件
            </summary>
            <param name="dir"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.FileHelper.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:Infrastructure.Helper.HtmlHelper.ReplaceHtmlTag(System.String,System.Int32)">
            <summary>
            去除富文本中的HTML标签
            </summary>
            <param name="html"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.JsonHelper.GetJSON``1(System.Object)">
            <summary>
            转换对象为JSON格式数据
            </summary>
            <typeparam name="T">类</typeparam>
            <param name="obj">对象</param>
            <returns>字符格式的JSON数据</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Infrastructure.Helper.JsonHelper.JSON``1(System.Collections.Generic.List{``0})" -->
        <member name="M:Infrastructure.Helper.JsonHelper.ParseFormByJson``1(System.String)">
            <summary>
            JSON格式字符转换为T类型的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonStr"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Helper.MD5Helper">
            <summary>
            MD5 加密
            </summary>
        </member>
        <member name="M:Infrastructure.Helper.MD5Helper.MD5Encrypt16(System.String)">
            <summary>
            16位MD5加密
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.MD5Helper.MD5Encrypt32(System.String)">
            <summary>
            32位MD5加密
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Helper.MD5Helper.MD5Encrypt64(System.String)">
            <summary>
            64位MD5加密
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Helper.RecursionHelper">
            <summary>
            泛型递归求树形结构
            </summary>
        </member>
        <member name="M:Infrastructure.Helper.UnicodeHelper.StringToUnicode(System.String)">
            <summary>
            字符串转Unicode码
            </summary>
            <returns>The to unicode.</returns>
            <param name="value">Value.</param>
        </member>
        <member name="M:Infrastructure.Helper.UnicodeHelper.UnicodeToString(System.String)">
            <summary>
            Unicode转字符串
            </summary>
            <returns>The to string.</returns>
            <param name="unicode">Unicode.</param>
        </member>
        <member name="M:Infrastructure.SerializeHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.SerializeHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.UtilConvert">
            <summary>
            
            </summary>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToInt(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToInt(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToMoney(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToMoney(System.Object,System.Double)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToString(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToString(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDecimal(System.Object,System.Decimal)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDate(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToDate(System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.UtilConvert.ObjToBool(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.Jwt.JwtHelper.IssueJwt(Infrastructure.Jwt.TokenModelJwt)">
            <summary>
            根据用户信息，颁发Token
            </summary>
        </member>
        <member name="M:Infrastructure.Jwt.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析Token
            </summary>
        </member>
        <member name="M:Infrastructure.Jwt.JwtHelper.GetTokenModel(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            从请求文中，获取token中，包含的信息
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.Jwt.TokenModelJwt">
            <summary>
            jwt的 token 模型
            </summary>
        </member>
        <member name="P:Infrastructure.Jwt.TokenModelJwt.Uid">
            <summary>
            用户id
            </summary>
        </member>
        <member name="M:Infrastructure.LogHelper.SerilogServer.WriteLog(System.String,System.String[],System.Boolean)">
            <summary>
            记录日常日志
            </summary>
            <param name="filename"></param>
            <param name="message"></param>
            <param name="info"></param>
        </member>
        <member name="M:Infrastructure.LogHelper.SerilogServer.WriteErrorLog(System.String,System.String,System.Exception)">
            <summary>
            记录异常日志
            </summary>
            <param name="filename"></param>
            <param name="message"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Infrastructure.MemoryCache.ICaching">
            <summary>
            简单的缓存接口，只有查询和添加，以后会进行扩展
            </summary>
        </member>
        <member name="T:Infrastructure.MemoryCache.MemoryCaching">
            <summary>
            实例化缓存接口ICaching
            </summary>
        </member>
        <member name="T:Infrastructure.IRedisCacheManager">
            <summary>
            Redis缓存接口
            </summary>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.GetRedisConnection">
            <summary>
            核心代码，获取连接实例
            通过双if 夹lock的方式，实现单例模式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Get(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.GetValue(System.String)">
            <summary>
            查询
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Get``1(System.String)">
            <summary>
            获取
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Infrastructure.RedisCacheManager.SetValue(System.String,System.Byte[])">
            <summary>
            增加/修改
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Infrastructure.ValueMapping.ValueMappingPropertyName">
            <summary>
            在通过映射的方式进行赋值时，对源的属性进行名称标记，以便在映射的时候可以找到
            </summary>
        </member>
        <member name="T:Infrastructure.ValueMapping.ValueMappingSet">
            <summary>
            将DTO的值映射到一个现有的实体模型中
            </summary>
        </member>
        <member name="M:Infrastructure.ValueMapping.ValueMappingSet.ValueMapping``2(``0,``1)">
            <summary>
            通过映射的方式，将源数据实例的数据，赋值到现有的目标实例上
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源数据实例</param>
            <param name="target">目标</param>
        </member>
    </members>
</doc>
